/*
El siguiente es un template para el uso de las llamadas al sistema relacionadas con el uso de pipes / tuberias sin nombre.
*/

Declaracion:
//Se debe recordar que este es un IPC para procesos relacionados, ver templates de procesos. (Los fd se deben heredar)
	
	int pipefd[2]			//Creamos un arreglo de file descriptor para poder usar la pipe
					//[0] -> extremo de lectura (salida) 
					//[1] -> Extremo de escritura (entrada)
					
	if (pipe(pipefd)==-1)		//se crea la pipe y se almacena los extremos de R/W en los fd
	{ exit (-1);}	

	printf ("pipefd[0] = %d pipefd[1] =%d \n ", pipefd[0], pipefd[1]);	

	//fork();
//-------------------------------------------------------------------------------------------------------------
Proceso que va a LEER de la pipe:
	close(pipefd[1]); 				// Se cierra el lado de ESCRITURA [1]
	leido = read(pipefd[0], buff, sizeof(buff)); 	// Se lee hasta <sizeof(buff)> bytes de <pipefd[0]> y se almacena en buff, leido = cant efectiva leida
							//Llamada BLOQUEANTE
	if(leido < 1)					//Error al leer de la pipe
	{ 
		write (0, "\nError al leer tuberia", sizeof("\nError al leer tuberia"));} 
	}
	
//-------------------------------------------------------------------------------------------------------------
Proceso que va a ESCRIBIR en la pipe:	

	close(pipefd[0]);					// Se cierra el lado de LECTURA [0]
	escrito = write(pipefd[1], buff, sizeof(buff));	// Se escribe <sizeof(buff)> bytes en <pipefd[1]> y se almacena en buff. escrito = cant efectiva escrita
								//Llamada BLOQUEANTE
	if(escrito < 0)					//Error al escribir en la pipe
	{ 
		write (0, "\nError al escribir tuberia", sizeof("\nError al leer tuberia"));} 
	}

//-------------------------------------------------------------------------------------------------------------
Destruccion de tuberia

	if (close(pipefd[1])<0) 	// Se destruye al destruir todos los fd del extremo de escritura.
	{
		write (0, "\nError al cerrar extremo", sizeof("\nError al cerrar extremo"));} 
	}
//-------------------------------------------------------------------------------------------------------------
Manejador de señal sigpipe (se lanza cuando hay un problema con una pipe)

	void pipe_sign_handler(int a)
	{
		write (0, "\n Problema con pipeline.\n ", sizeof("\n Problema con pipeline.\n"));
		/*
		-
		-	AQUI VA MAS CODIGO DEL HANDLER
		-
		*/
	}
En main()
	signal(SIGPIPE, pipe_sign_handler); //Establece el manejador de la señal SIGPIPE
	
//-------------------------------------------------------------------------------------------------------------

	
